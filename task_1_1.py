"""
Задание 1.
Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько
вариантов кода для одной и той же задачи. Можно взять задачи с курса Основ или с текущего курса Алгоритмов

Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО

Задание
Реализовать функцию my_func(), которая принимает три позиционных аргумента и
возвращает сумму наибольших двух аргументов.
"""
import memory_profiler
import time


# Решение №1
def my_func(a, b, c):
    my_list = [a, b, c]
    my_list = sum(my_list) - min(my_list)
    return my_list


t1 = time.process_time()
m1 = memory_profiler.memory_usage()

print(my_func(102055, -36205.5, 36.259))

t2 = time.process_time()
m2 = memory_profiler.memory_usage()
time_diff = t2 - t1
mem_diff = m2[0] - m1[0]
print(f"Выполнение заняло {time_diff} сек and {mem_diff} Mib")


# Решение №2
def my_func(arg1, arg2, arg3):
    return sum(sorted([arg1, arg2, arg3])[1:])


t1 = time.process_time()
m1 = memory_profiler.memory_usage()

print(my_func(102055, -36205.5, 36.259))

t2 = time.process_time()
m2 = memory_profiler.memory_usage()
time_diff = t2 - t1
mem_diff = m2[0] - m1[0]
print(f"Выполнение заняло {time_diff} сек and {mem_diff} Mib")

"""
Интерпретатор - Python 3.8, разрядность ОС - 64 bit

Результат выполнения:
102091.259
Выполнение заняло 0.0 сек and 0.015625 Mib
102091.259
Выполнение заняло 0.0 сек and 0.0 Mib

Комментарий:
Во втором решении память была затрачена меньше из-за использования встроенных функций,
поэтому оно предпочтительнее.

"""